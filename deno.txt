islands/CitySelect.tsx
import { useEffect, useState } from "preact/hooks";
import { country } from "../signals/Country.ts";
import { city } from "../signals/City.ts";

const CitySelect = () => {
  const [cities, setCities] = useState<string[]>([]);
  useEffect(() => {
    const fetchCities = async (countryISO: string) => {
      const response = await fetch(
        "https://countriesnow.space/api/v0.1/countries/cities",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ iso2: countryISO }),
        },
      );
      if (!response.ok) {
        console.error("Failed to fetch cities");
        setCities([]);
      }
      const data = await response.json();
      setCities(data.data);
      city.value = data.data[0];
    };
    if (country.value !== "") {
      setCities([]);
      fetchCities(country.value);
    }
  }, [country.value]);

  if (cities.length > 0) {
    return (
      <>
        <label for="city">City</label>
        <select
          value={city}
          id="city"
          name="city"
          onChange={(e) => (city.value = e.currentTarget.value)}
          required
        >
          {cities.map((city) => (
            <option key={city} value={city}>
              {city}
            </option>
          ))}
        </select>
      </>
    );
  } else return null;
};

export default CitySelect;




islands/CountrySelect.tsx

import { FunctionalComponent } from "preact";
import { Country } from "../types.ts";
import { country } from "../signals/Country.ts";
import { IS_BROWSER } from "$fresh/runtime.ts";
import { useEffect } from "https://esm.sh/v128/preact@10.19.6/hooks/src/index.js";

type Props = {
  countries: Country[];
};

const CountrySelect: FunctionalComponent<Props> = ({ countries }) => {
  return (
    <>
      {countries.length > 0 && (
        <>
          <label for="country">Country</label>
          <select
            value={country.value !== "" ? country.value : countries[0].code}
            id="country"
            name="country"
            onChange={(e) => (country.value = e.currentTarget.value)}
            required
          >
            {countries.map((country) => (
              <option key={country.code} value={country.code}>
                {country.name}
              </option>
            ))}
          </select>
        </>
      )}
    </>
  );
};

export default CountrySelect;




islands/cart.tsx

import { FunctionComponent } from "preact";
import { CartItem } from "../types.ts";
import DecreaseProduct from "./DecreaseProduct.tsx";
import AddProduct from "./AddProduct.tsx";
import { useEffect, useState } from "preact/hooks";
import { cartNumber } from "../signals/cartNumber.ts";

const Cart: FunctionComponent = () => {
  const [cart, setCart] = useState<CartItem[]>([]);

  useEffect(() => {
    // load cart from cookie
    const cookies = document.cookie.split("; ");
    console.log(cookies);
    const cartCookie = cookies.find((cookie) => cookie.startsWith("cart="));

    if (cartCookie) {
      setCart(JSON.parse(cartCookie.split("=")[1]));
    }
  }, [cartNumber.value]);

  return (
    <>
      <div class="products">
        <h1>Cart</h1>
        {cart.map((item) => (
          <div class="item" key={item.product.id}>
            <span class="name">{item.product.name}</span>
            <span class="price">{item.product.price}€</span>
            <img src={item.product.image} alt={item.product.name} />
            <span class="description">{item.product.description}</span>
            <DecreaseProduct product={item.product} />
            <span class="quantity">{item.quantity}</span>
            <AddProduct product={item.product} />
          </div>
        ))}
        <div class="total">
          <div class="total-text">Total:</div>
          <div class="total-price">
            {
              // fix to to decimals

              cart
                .reduce(
                  (acc, item) => acc + item.product.price * item.quantity,
                  0,
                )
                .toFixed(2)
            }
            €
          </div>
        </div>
        <button
          class="checkout-button"
          onClick={() => {
            // got to /checkout page
            window.location.href = "/checkout";
          }}
        >
          Checkout
        </button>
      </div>
    </>
  );
};

export default Cart;



